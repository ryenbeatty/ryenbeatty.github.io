---
import { Image } from 'astro:assets'
import type { ImageMetadata } from 'astro'
import { figureTypeLabel } from 'src/index.types'
import type { FigureType } from 'src/index.enums'

const { src, alt, caption, figNum, type } = Astro.props

const pathPrefix = '../assets/'

const images = import.meta.glob<{ default: ImageMetadata }>(
  '../assets/*.{jpg,png}',
)

if (!images[`${pathPrefix}${src}`]) throw new Error(`"${src}" does not exist`)

const anim = {
  old: {
    name: 'fadeIn',
    duration: '0.2s',
    easing: 'linear',
    fillMode: 'forwards',
  },
  new: {
    name: 'fadeOut',
    duration: '0.3s',
    easing: 'linear',
    fillMode: 'backwards',
  },
}

const myFade = {
  forwards: anim,
  backwards: anim,
}
---

<figure transition:animate={myFade}>
  <div class="img">
    <Image src={images[`${pathPrefix}${src}`]()} width="500" alt={alt} />
  </div>

  <div class="caption">
    {figNum ? <p>{figNum}</p> : null}
    <figcaption>{caption}</figcaption>
    {
      type ? (
        <div>
          <span>{figureTypeLabel[type as FigureType]}</span>{' '}
        </div>
      ) : null
    }
  </div>
</figure>

<style>
  p {
    margin: 0;
  }
  figure {
    display: grid;
    grid-template-columns: 1fr 60px;
    margin-bottom: 2rem;
    /* border-bottom: 1px solid #000;
    border-right: 1px solid #000; */
  }

  img {
    /* grid-template-rows: 3; */
    width: 100%;
    /* flex-grow: 1; */
  }

  figcaption {
    /* margin-top: 8px; */
    /* writing-mode: vertical-rl;
    text-orientation: mixed; */
  }

  span {
    border: 1px solid black;
    border-radius: 8.5px;
    padding: 0 6px;
    text-transform: uppercase;
    padding: var(--sp-xs);
    font-size: var(--sp-xs);
  }

  .caption {
    writing-mode: vertical-rl;
    text-orientation: mixed;
    display: grid;
    text-align: center;
    /* grid-template-rows: 3; */
    grid-template-columns: 1fr 1fr auto;
    /* align-items: center; */
  }
</style>
